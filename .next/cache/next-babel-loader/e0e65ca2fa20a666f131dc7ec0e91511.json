{"ast":null,"code":"var _jsxFileName = \"/Users/cassidywilliams/GitHub/next-netlify-blog-starter/pages/post/[postname].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport matter from 'gray-matter';\nimport ReactMarkdown from 'react-markdown';\nimport Layout from '../../components/Layout';\nexport default function BlogTemplate(props) {\n  console.log(props);\n  if (!props.frontmatter) return __jsx(React.Fragment, null);\n  return __jsx(Layout, {\n    siteTitle: props.siteTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, props.frontmatter.title), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, __jsx(ReactMarkdown, {\n    source: props.markdownBody,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }))));\n}\nexport async function getStaticProps(_ref) {\n  let ctx = Object.assign({}, _ref);\n  const {\n    postname\n  } = ctx.params;\n  const content = await import(`../../posts/${postname}.md`);\n  const config = await import(`../../siteconfig.json`);\n  const data = matter(content.default);\n  return {\n    props: {\n      siteTitle: config.title,\n      frontmatter: data.data,\n      markdownBody: data.content\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const blogSlugs = (context => {\n    const keys = context.keys();\n    const data = keys.map((key, index) => {\n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3);\n      return slug;\n    });\n    return data;\n  })(require.context('../../posts', true, /\\.md$/));\n\n  const paths = blogSlugs.map(slug => `/post/${slug}`);\n  return {\n    paths,\n    // An array of path names, and any params\n    fallback: false // so that 404s properly appear if something's not matching\n\n  };\n}","map":{"version":3,"sources":["/Users/cassidywilliams/GitHub/next-netlify-blog-starter/pages/post/[postname].js"],"names":["matter","ReactMarkdown","Layout","BlogTemplate","props","console","log","frontmatter","siteTitle","title","markdownBody","getStaticProps","ctx","postname","params","content","config","data","default","getStaticPaths","blogSlugs","context","keys","map","key","index","slug","replace","slice","require","paths","fallback"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,MAAI,CAACA,KAAK,CAACG,WAAX,EAAwB,OAAO,2BAAP;AAExB,SACE,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAEH,KAAK,CAACI,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,KAAK,CAACG,WAAN,CAAkBE,KAAvB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEL,KAAK,CAACM,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF,CADF;AAUD;AAED,OAAO,eAAeC,cAAf,OAA0C;AAAA,MAAPC,GAAO;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAeD,GAAG,CAACE,MAAzB;AAEA,QAAMC,OAAO,GAAG,MAAM,OAAQ,eAAcF,QAAS,KAA/B,CAAtB;AACA,QAAMG,MAAM,GAAG,MAAM,OAAQ,uBAAR,CAArB;AACA,QAAMC,IAAI,GAAGjB,MAAM,CAACe,OAAO,CAACG,OAAT,CAAnB;AAEA,SAAO;AACLd,IAAAA,KAAK,EAAE;AACLI,MAAAA,SAAS,EAAEQ,MAAM,CAACP,KADb;AAELF,MAAAA,WAAW,EAAEU,IAAI,CAACA,IAFb;AAGLP,MAAAA,YAAY,EAAEO,IAAI,CAACF;AAHd;AADF,GAAP;AAOD;AAED,OAAO,eAAeI,cAAf,GAAgC;AACrC,QAAMC,SAAS,GAAG,CAAEC,OAAD,IAAa;AAC9B,UAAMC,IAAI,GAAGD,OAAO,CAACC,IAAR,EAAb;AAEA,UAAML,IAAI,GAAGK,IAAI,CAACC,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACpC,UAAIC,IAAI,GAAGF,GAAG,CAACG,OAAJ,CAAY,WAAZ,EAAyB,EAAzB,EAA6BC,KAA7B,CAAmC,CAAnC,EAAsC,CAAC,CAAvC,CAAX;AAEA,aAAOF,IAAP;AACD,KAJY,CAAb;AAKA,WAAOT,IAAP;AACD,GATiB,EASfY,OAAO,CAACR,OAAR,CAAgB,aAAhB,EAA+B,IAA/B,EAAqC,OAArC,CATe,CAAlB;;AAWA,QAAMS,KAAK,GAAGV,SAAS,CAACG,GAAV,CAAeG,IAAD,IAAW,SAAQA,IAAK,EAAtC,CAAd;AAEA,SAAO;AACLI,IAAAA,KADK;AACE;AACPC,IAAAA,QAAQ,EAAE,KAFL,CAEY;;AAFZ,GAAP;AAID","sourcesContent":["import matter from 'gray-matter'\nimport ReactMarkdown from 'react-markdown'\n\nimport Layout from '../../components/Layout'\n\nexport default function BlogTemplate(props) {\n  console.log(props)\n\n  if (!props.frontmatter) return <></>\n\n  return (\n    <Layout siteTitle={props.siteTitle}>\n      <article>\n        <h1>{props.frontmatter.title}</h1>\n        <div>\n          <ReactMarkdown source={props.markdownBody} />\n        </div>\n      </article>\n    </Layout>\n  )\n}\n\nexport async function getStaticProps({ ...ctx }) {\n  const { postname } = ctx.params\n\n  const content = await import(`../../posts/${postname}.md`)\n  const config = await import(`../../siteconfig.json`)\n  const data = matter(content.default)\n\n  return {\n    props: {\n      siteTitle: config.title,\n      frontmatter: data.data,\n      markdownBody: data.content,\n    },\n  }\n}\n\nexport async function getStaticPaths() {\n  const blogSlugs = ((context) => {\n    const keys = context.keys()\n\n    const data = keys.map((key, index) => {\n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3)\n\n      return slug\n    })\n    return data\n  })(require.context('../../posts', true, /\\.md$/))\n\n  const paths = blogSlugs.map((slug) => `/post/${slug}`)\n\n  return {\n    paths, // An array of path names, and any params\n    fallback: false, // so that 404s properly appear if something's not matching\n  }\n}\n"]},"metadata":{},"sourceType":"module"}